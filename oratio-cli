#!/usr/bin/python3

import sys
import getpass
import os
import json
import re
import requests  # requires the requests library to be installed
import appdirs  # requires the appdirs library to be installed

from oratioignoreparser import OratioIgnoreParser
import oratiomodulezipper

def main():
    if len(sys.argv) < 2:
        interactive()
        return
    cmd = sys.argv[1]
    args = sys.argv[2:]
    exec_cmd(cmd, args)


def interactive():
    print("Interactive Oratio Command Line Interface")
    while True:
        inp = input(">>> ")
        parts = inp.split(" ")
        cmd = parts[0]
        args = parts[1:]
        exec_cmd(cmd, args)


def exec_cmd(cmd, args):
    if cmd == "init":
        init(args)
    elif cmd == "status":
        status()
    elif cmd == "ignored":
        ignored()
    elif cmd == "auth":
        auth()
    elif cmd == "rmsession":
        rmsession()
    elif cmd == "compress":
        compress()
    elif cmd == "login":
        login()
    elif cmd == "logout":
        logout()
    elif cmd == "create":
        create()
    elif cmd == "upload":
        upload(args)
    elif cmd == "quit":
        sys.exit(0)


def init(args):
    if len(args) == 0:
        module_id = input("Module ID: ")
        entry_point = input("Entry point: ")
    elif len(args) == 2:
        module_id = args[0]
        entry_point = args[1]
    else:
        print("Error: 0 or 2 arguments expected.")
        return
    if os.path.isfile("module.json"):
        yn = input("Warning: module.json already exists. Overwrite? (y/n) ").lower()
        if yn == "n":
            print("module.json won't be overwritten")
            return
        elif yn != "y":
            print("Error: y/n expected, invalid input found.")
            return
    json_data = requests.get("http://dev.oratio.io/package-manager/info?id=" + module_id)
    if "error" in json_data.json():
        print("Error: error message in JSON response.")
        print(json_data.text)
        return
    print("Writing to " + os.path.join(os.getcwd(), "module.json"))
    with open("module.json", "w") as f:
        new_json = json_data.json()
        new_json["entry_point"] = entry_point
        json.dump(new_json, f)
    print("Done.")


def status():
    print("Checking .oratio-ignore file...")
    parser = OratioIgnoreParser()
    if not os.path.isfile(".oratio-ignore"):
        print("No .oratio-ignore file found.")
    else:
        print(".oratio-ignore file found.")
        parser.load(".oratio-ignore")
    print(os.linesep)
    filepaths = parser.list_files(".")[0]
    for filepath in filepaths:
        print(filepath)


def ignored():
    print("Checking .oratio-ignore file...")
    parser = OratioIgnoreParser()
    if not os.path.isfile(".oratio-ignore"):
        print("No .oratio-ignore file found.")
        return
    print(".oratio-ignore file found.")
    print("Ignored files:")
    parser.load(".oratio-ignore")
    print(os.linesep)
    for filepath in parser.list_files(".")[1]:
        print(filepath)


def auth():
    access_token = input("Enter Oratio.io OAuth access token: ")
    # TODO: check whether the token is valid
    with open(os.path.join(os.path.expanduser("~"), ".oratio-session"), "w") as f:
        f.write(access_token)
    print("Authenticated and access token stored in ~/.oratio-session")


def rmsession():
    session_file = os.path.join(os.path.expanduser("~"), ".oratio-session")
    if os.path.isfile(session_file):
        os.remove(session_file)
        print("OAuth session removed.")
    else:
        print("No OAuth session found.")


def compress():
    if os.path.isfile("oratiomodule.tar.gz"):
        yn = input("oratiomodule.tar.gz already exists. Overwrite? (y/n) ").lower()
        if yn == "n":
            print("Compression cancelled.")
            return
        elif yn != "y":
            print("Invalid input. Stopping.")
            return
    parser = OratioIgnoreParser()
    if os.path.isfile(".oratio-ignore"):
        parser.load(".oratio-ignore")
    oratiomodulezipper.compress_module(parser.list_files(".")[0], "oratiomodule.tar.gz")
    print("Compressed to oratiomodule.tar.gz")


# Obsolete commands can be found below this line.
# They will get removed soon, when the other,
# non-obsolete functions have been implemented.


def login():
    print("Obsolete command.")
    return
    email = input("Login email: ")
    password = getpass.getpass("Password: ")
    resp = requests.post("https://accounts.oratio.io/login")
    # TODO: fetch session ID from response when the login page is implemented
    session_id = 1
    data_dir = appdirs.user_data_dir("OratioCLI", "OratioIO")
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
    filename = os.path.join(data_dir, "login_session.txt")
    with open(filename, "w") as f:
        f.write(str(session_id))
    print("Logged in successfully.")


def logout():
    print("Obsolete command.")
    return
    data_dir = appdirs.user_data_dir("OratioCLI", "OratioIO")
    filename = os.path.join(data_dir, "login_session.txt")
    if not os.path.isfile(filename):
        print("Not logged in.")
        return
    with open(filename, "r") as f:
        session_id = int(f.read())
    requests.post("https://accounts.oratio.io/logout", {"id": session_id})
    os.remove(filename)
    print("Logged out successfully.")


def create():
    print("Obsolete command.")
    id_ = int(input("Module ID: "))
    out_name = input("Output file path: ")
    if os.path.isfile(out_name):
        yn = input("Output file already exists. Overwrite? (y/n) ")
        if yn == "y" or yn == "Y":
            print("File will be overwritten.")
        elif yn == "n" or yn == "N":
            print("File will not be overwritten. Stopped command execution.")
            return
        else:
            print("Invalid input, assuming 'n'.")
            print("File will not be overwritten. Stopped command execution.")
            return
    data = {"id": id_}
    with open(out_name, "w") as f:
        json.dump(data, f)
    print("Module JSON file written to " + out_name)


def upload(args):
    print("Obsolete command.")
    return
    if len(args) < 1:
        json_file = input("Specify a module JSON file: ")
    else:
        json_file = args[0]
    print("Uploading " + json_file)
    # TODO: send upload request when upload page is ready
    print("Module uploaded.")


main()
