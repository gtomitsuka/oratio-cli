#!/usr/bin/python3

import sys
import getpass
import os
import json
import re
import requests  # requires the requests library to be installed

from oratioignoreparser import OratioIgnoreParser
import oratiomodulezipper
from clihelp import clihelp


def interactive():
    print("Interactive Oratio Command Line Interface")
    while True:
        inp = input(">>> ")
        parts = inp.split(" ")
        cmd = parts[0]
        args = parts[1:]
        exec_cmd(cmd, args)


def exec_cmd(cmd, args):
    if cmd in command_list:
        cmd_func = command_list[cmd][0]
        if command_list[cmd][1] == 0:
            cmd_func()
        else:
            cmd_func(args)
    else:
        print("Command not found.")


def init(args):
    if len(args) == 0:
        module_id = input("Module ID: ")
        entry_point = input("Entry point: ")
    elif len(args) == 2:
        module_id = args[0]
        entry_point = args[1]
    else:
        print("Error: 0 or 2 arguments expected.")
        return
    if os.path.isfile("module.json"):
        yn = input("Warning: module.json already exists. Overwrite? (y/n) ").lower()
        if yn == "n":
            print("module.json won't be overwritten")
            return
        elif yn != "y":
            print("Error: y/n expected, invalid input found.")
            return
    json_data = requests.get("http://dev.oratio.io/package-manager/info?id=" + module_id)
    if "error" in json_data.json():
        print("Error: error message in JSON response.")
        print(json_data.text)
        return
    print("Writing to " + os.path.join(os.getcwd(), "module.json"))
    with open("module.json", "w") as f:
        new_json = json_data.json()
        new_json["entry_point"] = entry_point
        json.dump(new_json, f)
    print("Done.")


def status():
    print("Checking .oratio-ignore file...")
    parser = OratioIgnoreParser()
    if not os.path.isfile(".oratio-ignore"):
        print("No .oratio-ignore file found.")
    else:
        print(".oratio-ignore file found.")
        parser.load(".oratio-ignore")
    print(os.linesep)
    filepaths = parser.list_files(".")[0]
    for filepath in filepaths:
        print(filepath)


def ignored():
    print("Checking .oratio-ignore file...")
    parser = OratioIgnoreParser()
    if not os.path.isfile(".oratio-ignore"):
        print("No .oratio-ignore file found.")
        return
    print(".oratio-ignore file found.")
    print("Ignored files:")
    parser.load(".oratio-ignore")
    print(os.linesep)
    for filepath in parser.list_files(".")[1]:
        print(filepath)


def auth():
    access_token = input("Enter Oratio.io OAuth access token: ")
    # TODO: check whether the token is valid
    with open(os.path.join(os.path.expanduser("~"), ".oratio-session"), "w") as f:
        f.write(access_token)
    print("Authenticated and access token stored in ~/.oratio-session")


def rmsession():
    session_file = os.path.join(os.path.expanduser("~"), ".oratio-session")
    if os.path.isfile(session_file):
        os.remove(session_file)
        print("OAuth session removed.")
    else:
        print("No OAuth session found.")


def compress():
    if os.path.isfile("oratiomodule.tar.gz"):
        yn = input("oratiomodule.tar.gz already exists. Overwrite? (y/n) ").lower()
        if yn == "n":
            print("Compression cancelled.")
            return
        elif yn != "y":
            print("Invalid input. Stopping.")
            return
    oratiomodulezipper.compress_module(".")
    print("Compressed to oratiomodule.tar.gz")


def publish():
    if not os.path.isfile("oratiomodule.tar.gz"):
        print("FATAL: oratiomodule.tar.gz not found in working directory.")
        return
    session_file = os.path.join(os.path.expanduser("~"), ".oratio-session")
    if not os.path.isfile(session_file):
        print("FATAL: no .oratio-session found. Please run the auth command.")
        return
    with open(session_file, "r") as f:
        access_token = f.read()
    # TODO: validate access token when server page exists
    print("Upload started.")
    requests.put("http://dev.oratio.io/package-manager/upload",
                 headers={"Authorization": "Bearer " + access_token},
                 files={"module": open("oratiomodule.tar.gz", "rb")})
    print("Finished!")


def cli_help(args):
    if len(args) != 1:
        print("Error: 1 argument expected")
        return
    if args[0] in clihelp:
        print(clihelp[args[0]])
    else:
        print("No help entry found.")


command_list = {"init": (init, 1),
                "status": (status, 0),
                "ignored": (ignored, 0),
                "auth": (auth, 0),
                "rmsession": (rmsession, 0),
                "compress": (compress, 0),
                "publish": (publish, 0),
                "help": (cli_help, 1),
                "quit": (sys.exit, 0)}

if len(sys.argv) < 2:
    interactive()
else:
    cmd = sys.argv[1]
    args = sys.argv[2:]
    exec_cmd(cmd, args)
